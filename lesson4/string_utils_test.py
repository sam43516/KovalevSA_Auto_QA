from string_utils import StringUtils
import pytest


#capitilize - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç, –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—É—é –±—É–∫–≤—É –∑–∞–≥–ª–∞–≤–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç.

@pytest.mark.parametrize("str, result", [("ivan","Ivan"), ("Ivan","Ivan" ), ("a","A"), ("–∏–≤–∞–Ω","–ò–≤–∞–Ω")])
def test_capitilize_positive(str, result):
    string = StringUtils()
    res = string.capitilize(str)
    assert res == result

@pytest.mark.parametrize("str, result", [("1","1"), ("%","%"), ("üçë","üçë"), (" "," ")])
def test_capitilize_negative(str, result):
    string = StringUtils()
    res = string.capitilize(str)
    assert res == result   



# trim - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –∏ —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
    
@pytest.mark.parametrize("str, result", [ (" test","test"), ("   0","0"),("abc","abc"),("tes     t","tes     t"),("", "")])
def test_trim_positive_and_negative(str, result):
    string = StringUtils()
    res = string.trim(str)
    assert res == result



# to_list - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: `string` - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, `delimeter` - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—è—Ç–∞—è (",").

@pytest.mark.parametrize("str, result", [("a,b,c,d", ["a", "b", "c", "d"]), ("1,2,3,4", ["1", "2", "3", "4"]), (":,:,:,:", [":", ":", ":", ":"]),(",", ["",""])])
def test_to_list_delimeter_comma(str, result):
    string = StringUtils()
    res = string.to_list(str)
    assert res == result

@pytest.mark.parametrize("str, delimeter, result", [("a*b*c*d", "*", ["a", "b", "c", "d"]), ("1:2:3", ":", ["1", "2", "3"]), ("–ü.–ü.–ü", ".", ["–ü", "–ü", "–ü"]), ("@;#;$;%", ";", ["@", "#", "$", "%"])])
def test_to_list_positive(str, delimeter, result):
    string = StringUtils()
    res = string.to_list(str, delimeter)
    assert res == result
    
@pytest.mark.parametrize("str, delimeter, result", [("abc", ",", ["abc"]), ("1 2 3", " ", ["1", "2", "3"]), (" ", " ", [])])
def test_to_list_negative(str, delimeter, result):
    string = StringUtils()
    res = string.to_list(str, delimeter)
    assert res == result




# contains - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª –∏ `False` - –µ—Å–ª–∏ –Ω–µ—Ç. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`string` - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, `symbol` - –∏—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª.

@pytest.mark.parametrize("str, symbol, result", [("SkyPro", "S", True), ("SkyPro", "Sky", True),("SkyPro", "SkyPro", True),("SkyPro", "G", False),("–ê", "A", False)] )
def test_contains_positive(str, symbol, result):
    string = StringUtils()
    res = string.contains(str, symbol)
    assert res == result

@pytest.mark.parametrize("str, symbol, result", [("SkyPro", "", True), ("", "", True), (" ", " ", True)] )
def test_contains_negative(str, symbol, result):
    string = StringUtils()
    res = string.contains(str, symbol)
    assert res == result




# delete_symbol - –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`string` - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, `symbol` - –∏—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. 
  
@pytest.mark.parametrize("str, symbol, result", [("SkyPro", "k", "SyPro"), ("SkyPro", "SkyPro", ""), ("SkyPro", "Skypro", "SkyPro")] )
def test_delete_symbol_postive(str, symbol, result):
    string = StringUtils()
    res = string.delete_symbol(str, symbol)
    assert res == result

@pytest.mark.parametrize("str, symbol, result", [("SkyPro", "", "SkyPro"), ("SkyPro", " ", "SkyPro"), ("SkyPro", "g", "SkyPro")] )
def test_delete_symbol_negative(str, symbol, result):
    string = StringUtils()
    res = string.delete_symbol(str, symbol)
    assert res == result


        
# starts_with - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∏ `False` - –µ—Å–ª–∏ –Ω–µ—Ç. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`string` - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, `symbol` - –∏—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª.
    
@pytest.mark.parametrize("str, symbol, result", [("–°–µ–º–µ–Ω", "–°", True), ("–°–µ–º–µ–Ω", "H", False), (" –°–µ–º–µ–Ω", " ", True), ("–°–µ–º–µ–Ω", "C", False)])
def test_starts_with_positive(str, symbol, result):
    string = StringUtils()
    res = string.starts_with(str, symbol)
    assert res == result

@pytest.mark.parametrize("str, symbol, result", [("–°–µ–º–µ–Ω", "", False ), ("", "", True ), ("     ", "     ", True )] )
def test_starts_with_negative(str, symbol, result):
    string = StringUtils()
    res = string.starts_with(str, symbol)
    if symbol == "" and str != "":
        pytest.xfail(reason= '–∑–∞ –Ω–µ–∏–º–µ–Ω–∏–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ - —Å—á–∏—Ç–∞—é –±–∞–≥–æ–º')
    assert res == result



# end_with - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∑–∞–¥–∞–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º –∏ `False` - –µ—Å–ª–∏ –Ω–µ—Ç. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:`string` - —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏, `symbol` - –∏—Å–∫–æ–º—ã–π —Å–∏–º–≤–æ–ª.

@pytest.mark.parametrize("str, symbol, result", [("–°–µ–º–µ–Ω", "–Ω", True), ("–°–µ–º–µ–Ω", "H", False), ("–°–µ–º–µ–Ω", " ", False), ("–ü–µ—Ç—Ä", "p", False)])
def test_end_with_positive(str, symbol, result):
    string = StringUtils()
    res = string.end_with(str, symbol)
    assert res == result

@pytest.mark.parametrize("str, symbol, result", [("–°–µ–º–µ–Ω", "", False), ("–°–µ–º–µ–Ω", " ", False), ("", "", True), (" ", " ", True)])
def test_end_with_negative(str, symbol, result):
    string = StringUtils()
    res = string.end_with(str, symbol)
    if symbol == "" and str != "":
        pytest.xfail(reason= '–∑–∞ –Ω–µ–∏–º–µ–Ω–∏–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ - —Å—á–∏—Ç–∞—é –±–∞–≥–æ–º')
    assert res == result



# is_empty - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True`, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏ `False` - –µ—Å–ª–∏ –Ω–µ—Ç.
   
@pytest.mark.parametrize("str, result", [("", True), (" ", True), ("—Ç–µ—Å—Ç", False)])
def test_is_empty_positive(str, result):
    string = StringUtils()
    res = string.is_empty(str)
    assert res == result

@pytest.mark.parametrize("str, result", [("______", False), (" " " ", True)])
def test_is_empty_negative(str, result):
    string = StringUtils()
    res = string.is_empty(str)
    assert res == result


# list_to_string - –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: `lst` - —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, `joiner` - —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—è—Ç–∞—è (", ").

@pytest.mark.parametrize("list, result", [([1,2,3], "1, 2, 3"), (["1", 1], "1, 1"), ([True, 1.2], "True, 1.2"), ([[1, 2], (1, 2)], "[1, 2], (1, 2)")])
def test_list_to_string_joiner_comma(list, result):
    lst = StringUtils()
    res = lst.list_to_string(list)
    assert res == result

@pytest.mark.parametrize("list, joiner, result", [([1,True,"str"], ":", "1:True:str"), ([3.14, [1], "(abc)"], "-", "3.14-[1]-(abc)"), ([{"–ò–º—è":"–°–µ–º–µ–Ω"},2], "@", "{'–ò–º—è': '–°–µ–º–µ–Ω'}@2")])
def test_list_to_string_positive(list, joiner, result):
    lst = StringUtils()
    res = lst.list_to_string(list, joiner)
    assert res == result

@pytest.mark.parametrize("list, joiner, result", [([], ",", ""), ([",",","], ",", ",,,"), ([123], "", "123")])
def test_list_to_string_negative(list, joiner, result):
    lst = StringUtils()
    res = lst.list_to_string(list, joiner)
    assert res == result